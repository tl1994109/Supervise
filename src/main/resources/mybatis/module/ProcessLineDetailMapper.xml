<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.datcent.project.module.process.mapper.ProcessLineDetailMapper">
    
    <resultMap type="ProcessLineDetail" id="ProcessLineDetailResult">
        <result property="processId"    column="process_id"    />
        <result property="lineId"    column="line_id"    />
        <result property="lineName"    column="line_name"    />
        <result property="fromNodeId"    column="from_node_id"    />
        <result property="toNodeId"    column="to_node_id"    />
    </resultMap>
	
	<sql id="selectProcessLineDetailVo">
        select process_id, line_id, line_name, from_node_id, to_node_id from oa_process_line_detail
    </sql>
	
    <select id="selectProcessLineDetailList" parameterType="ProcessLineDetail" resultMap="ProcessLineDetailResult">
        <include refid="selectProcessLineDetailVo"/>
        <where>  
            <if test="processId != null and processId != ''"> and process_id = #{processId}</if>
             <if test="lineId != null and lineId != ''"> and line_id = #{lineId}</if>
             <if test="lineName != null and lineName != ''"> and line_name = #{lineName}</if>
             <if test="fromNodeId != null and fromNodeId != ''"> and from_node_id = #{fromNodeId}</if>
             <if test="toNodeId != null and toNodeId != ''"> and to_node_id = #{toNodeId}</if>
         </where>
    </select>
    
    <select id="selectProcessLineDetailById" parameterType="String" resultMap="ProcessLineDetailResult">
        <include refid="selectProcessLineDetailVo"/>
        where process_id = #{processId}
    </select>
        
    <insert id="insertProcessLineDetail" parameterType="ProcessLineDetail">
        insert into oa_process_line_detail
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="processId != null and processId != '' ">process_id,</if>
			<if test="lineId != null and lineId != '' ">line_id,</if>
			<if test="lineName != null and lineName != '' ">line_name,</if>
			<if test="fromNodeId != null and fromNodeId != '' ">from_node_id,</if>
			<if test="toNodeId != null and toNodeId != '' ">to_node_id,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="processId != null and processId != ''">#{processId},</if>
			<if test="lineId != null and lineId != ''">#{lineId},</if>
			<if test="lineName != null and lineName != ''">#{lineName},</if>
			<if test="fromNodeId != null and fromNodeId != ''">#{fromNodeId},</if>
			<if test="toNodeId != null and toNodeId != ''">#{toNodeId},</if>
         </trim>
    </insert>
	 
    <update id="updateProcessLineDetail" parameterType="ProcessLineDetail">
        update oa_process_line_detail
        <trim prefix="SET" suffixOverrides=",">
            <if test="lineId != null  and lineId != ''  ">line_id = #{lineId},</if>
            <if test="lineName != null  and lineName != ''  ">line_name = #{lineName},</if>
            <if test="fromNodeId != null  and fromNodeId != ''  ">from_node_id = #{fromNodeId},</if>
            <if test="toNodeId != null  and toNodeId != ''  ">to_node_id = #{toNodeId},</if>
        </trim>
        where process_id = #{processId}
    </update>

	<delete id="deleteProcessLineDetailById" parameterType="String">
        delete from oa_process_line_detail where process_id = #{processId}
    </delete>
	
    <delete id="deleteProcessLineDetailByIds" parameterType="String">
        delete from oa_process_line_detail where process_id in 
        <foreach item="processId" collection="array" open="(" separator="," close=")">
            #{processId}
        </foreach>
    </delete>
    
</mapper>